import React, {createContext, useContext, useState, ReactNode, useEffect} from 'react';
import { ProductType } from "../App";

type BasketContextType = {
	basket: ProductType[];
	addToBasket: (product: ProductType) => void;
	removeProductToBasket: (id: string) => void;  // Изменено на string
};

const BasketContext = createContext<BasketContextType | undefined>(undefined);

export const useBasket = () => {
	const context = useContext(BasketContext);
	if (!context) {
		throw new Error('useBasket must be used within a BasketProvider');
	}
	return context;
};

type BasketProviderProps = {
	children: ReactNode;
};

export const BasketProvider = ({ children }: BasketProviderProps) => {
	const [basket, setBasket] = useState<ProductType[]>([]);

	useEffect(() => {
		let getBasket = sessionStorage.getItem('basket'); //
		if (getBasket) {
			setBasket(JSON.parse(getBasket))
		}
	}, []);


	useEffect(() => {
		sessionStorage.setItem('basket', JSON.stringify(basket));
	}, [basket]);

	const addToBasket = (product: ProductType) => {
		setBasket((prevBasket) => [...prevBasket, product]);
	};

	const removeProductToBasket = (id: string) => {
		setBasket(basket.filter((prevBasket) => prevBasket.id !== id));
	};

	return (
		<BasketContext.Provider value={{ basket, addToBasket, removeProductToBasket }}>
			{children}
		</BasketContext.Provider>
	);
};



import * as React from 'react';
import styled from 'styled-components';
import { theme } from '../../styles/theme';
import { Button } from '@mui/material';
import { useBasket } from "../../components/BasketContext";
import { useNavigate } from 'react-router-dom';
import {ProductType} from "../../App";

type Props = {};

export const Basket = (props: Props) => {
	const { basket, removeProductToBasket } = useBasket();
	const navigate = useNavigate();

	const handleOrderClick = () => {
		// Передача товаров и суммы заказа через navigate
		navigate('/order', {
			state: {
				products: Object.values(groupedBasket),
				total: totalBasket
			}
		});
	};

	// Сгруппируем товары по их ID
	const groupedBasket = basket.reduce((acc, product) => {
		if (acc[product.id]) {
			acc[product.id].quantity += 1;
		} else {
			acc[product.id] = { ...product, quantity: 1 };
		}
		return acc;
	}, {} as Record<string, ProductType & { quantity: number }>);

	let totalBasket: number = 0;

	return (
		<StyledBasket>
			<div>Корзина</div>
			{basket.length === 0 ? (
				<EmptyBasket>Ваша корзина пуста</EmptyBasket>
			) : (
				<ProductList>
					{Object.values(groupedBasket).map((product) => {
						totalBasket += product.price * product.quantity;
						return (
							<ProductCard key={product.id}>
								<ProductImage src={product.imgUrl} alt={product.title} />
								<ProductDetails>
									<ProductTitle>{product.title}</ProductTitle>
									<ProductPrice>{product.price * product.quantity}₽</ProductPrice>
									<ProductQuantity>{product.quantity} шт</ProductQuantity>
								</ProductDetails>
								<StyledButton onClick={() => removeProductToBasket(product.id)}>x</StyledButton>
							</ProductCard>
						);
					})}
				</ProductList>
			)}
			<SummaryDiv>
				<span>Всего: {totalBasket}₽</span>
				<StyledButton onClick={handleOrderClick}>Оформить заказ</StyledButton>
			</SummaryDiv>
		</StyledBasket>
	);
};

const StyledBasket = styled.div`
  height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: 20px;
`;

const EmptyBasket = styled.div`
  font-size: 24px;
  margin-top: 20px;
`;

const ProductList = styled.div`
  display: flex;
  flex-direction: column;
  gap: 20px;
  margin-top: 20px;
`;

const ProductCard = styled.div`
  display: flex;
  align-items: center;
  gap: 20px;
`;

const ProductImage = styled.img`
  width: 100px;
  height: 150px;
  object-fit: cover;
`;

const ProductDetails = styled.div`
  display: flex;
  flex-direction: column;
`;

const ProductTitle = styled.h3`
  margin: 0;
`;

const ProductPrice = styled.p`
  margin: 5px 0;
  font-size: 18px;
  color: ${theme.mainTextColor};
`;

const ProductQuantity = styled.p`
  margin: 5px 0;
  font-size: 18px;
  color: ${theme.secondaryTextColor};
`;

const StyledButton = styled(Button)`
  && {
    font-size: 16px;
    background-color: ${theme.mainBackgroundColor};
    color: ${theme.secondaryTextColor};
    border-radius: 8px;
    padding: 8px 16px;

    &:hover {
      background-color: transparent;
      color: ${theme.mainTextColor};
      box-shadow: none;
    }
  }
`;

const SummaryDiv = styled.div`
  margin-top: 20px;
  display: flex;
  justify-content: center;
  align-items: center;
`;

export default Basket;





import * as React from 'react';
import styled from 'styled-components';
import { theme } from '../../styles/theme';
import { Button } from '@mui/material';
import { useForm } from "react-hook-form";
import { useLocation } from 'react-router-dom';
import {ProductType} from "../../App";

type OrderFormProps = {};

const OrderForm = (props: OrderFormProps) => {
	const { register, handleSubmit, formState: { errors } } = useForm();
	const location = useLocation();
	const { products, total } = location.state as {
		products: (ProductType & { quantity: number })[];
		total: number;
	};

	const onSubmit = (data: any) => {
		const orderData = {
			...data,
			products,
			total
		};
		console.log(orderData);
		// Здесь обрабатывать данные формы, например, отправить их на сервер
	};

	return (
		<StyledForm onSubmit={handleSubmit(onSubmit)}>
			<Field>
				<label>Фамилия</label>
				<input {...register("lastName", { required: true })} />
				{errors.lastName && <span>Это поле обязательно</span>}
			</Field>
			<Field>
				<label>Имя</label>
				<input {...register("firstName", { required: true })} />
				{errors.firstName && <span>Это поле обязательно</span>}
			</Field>
			<Field>
				<label>Отчество</label>
				<input {...register("middleName", { required: false })} />
			</Field>
			<Field>
				<label>Город</label>
				<input {...register("city", { required: true })} />
				{errors.city && <span>Это поле обязательно</span>}
			</Field>
			<Field>
				<label>Адрес Сдека</label>
				<input {...register("sdekAddress", { required: true })} />
				{errors.sdekAddress && <span>Это поле обязательно</span>}
			</Field>
			<Field>
				<label>Номер телефона</label>
				<input {...register("phoneNumber", { required: true })} />
				{errors.phoneNumber && <span>Это поле обязательно</span>}
			</Field>
			<Field>
				<label>Комментарий к заказу</label>
				<textarea {...register("comment", { required: false })} />
			</Field>
			<StyledButton type="submit">Оплатить</StyledButton>
		</StyledForm>
	);
};

const StyledForm = styled.form`
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: 20px;
`;

const Field = styled.div`
  display: flex;
  flex-direction: column;
  margin-bottom: 10px;

  label {
    margin-bottom: 5px;
  }

  input, textarea {
    padding: 8px;
    font-size: 16px;
    border: 1px solid #ccc;
    border-radius: 4px;
  }

  span {
    color: red;
    font-size: 12px;
  }
`;

const StyledButton = styled(Button)`
  && {
    font-size: 16px;
    background-color: ${theme.mainBackgroundColor};
    color: ${theme.mainTextColor};
    border-radius: 8px;
    padding: 8px 16px;
    margin-top: 20px;

    &:hover {
      background-color: transparent;
      color: ${theme.secondaryTextColor};
      box-shadow: none;
    }
  }
`;

export default OrderForm;


import React, {useRef} from 'react';
import styled from 'styled-components';
import { useParams, useNavigate } from 'react-router-dom';
import { ProductType } from '../../../../../App';
import { Button } from '@mui/material';
import { theme } from '../../../../../styles/theme';
import ImageGallery from 'react-image-gallery';
import 'react-image-gallery/styles/css/image-gallery.css';
import { GlobalStyle } from '../../../../../styles/GlobalStyle';
import {useBasket} from "../../../../../components/BasketContext";

type ProductDetailProps = {
	products: ProductType[];
};

const ProductDetail = ({ products }: ProductDetailProps) => {
	const { id } = useParams<{ id: string }>();
	const product = products.find((product) => product.id === id);
	const navigate = useNavigate();
	const { addToBasket } = useBasket(); // Получаем функцию добавления в корзину

	const galleryRef = useRef<ImageGallery>(null);

	if (!product) {
		return <div>Product not found</div>;
	}

	const images = [
		{
			original: product.imgUrl,
			thumbnail: product.imgUrl,
		},
		{
			original: product.imgUrl,
			thumbnail: product.imgUrl,
		},
		{
			original: product.imgUrl,
			thumbnail: product.imgUrl,
		},
	];

	const handleImageClick = (e: React.MouseEvent<HTMLDivElement>) => {
		const rect = (e.target as HTMLDivElement).getBoundingClientRect();
		const clickX = e.clientX - rect.left;
		const width = rect.width;

		if (clickX < width / 2) {
			// Clicked on the left half
			galleryRef.current?.slideToIndex(galleryRef.current?.getCurrentIndex() - 1);
		} else {
			// Clicked on the right half
			galleryRef.current?.slideToIndex(galleryRef.current?.getCurrentIndex() + 1);
		}
	};

	const handleAddToBasket = () => {
		addToBasket(product);
	};

	return (
		<StyledProductDetail>
			<GlobalStyle />
			<StyledButton onClick={() => navigate(-1)}>Вернуться</StyledButton>
			<StyledImageGalleryWrapper onClick={handleImageClick}>
				<ImageGallery
					ref={galleryRef}
					items={images}
					showPlayButton={false}
					showFullscreenButton={false}
					showNav={false}
					showThumbnails={true}
					infinite={true}
					autoPlay={false}
					slideDuration={550}
				/>
			</StyledImageGalleryWrapper>
			<Title>{product.title}</Title>
			<Price>{product.price}₽</Price>
			<Sizes>Доступные размеры: {product.size}</Sizes>
			<Compound>Состав: {product.compound}</Compound>
			<StyledButton onClick={handleAddToBasket}>Добавить в корзину</StyledButton>
		</StyledProductDetail>
	);
};

const StyledProductDetail = styled.div`
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: 20px;
`;

const StyledImageGalleryWrapper = styled.div`
  width: 100%;
  max-width: 600px;
  margin: 20px 0;
`;

const Title = styled.h2`
  margin: 20px 0;
`;

const Price = styled.p`
  font-size: 20px;
  margin: 10px 0;
`;

const Sizes = styled.p`
  margin: 10px 0;
`;

const Compound = styled.p`
  margin: 10px 0;
`;

export const StyledButton = styled(Button)`
  && {
    font-size: 16px;
    background-color: ${theme.mainBackgroundColor};
    color: ${theme.mainTextColor};
    border-radius: 8px;
    padding: 8px 16px;

    &:hover {
      background-color: transparent;
      color: ${theme.secondaryTextColor};
      box-shadow: none;
    }
  }
`;

export default ProductDetail;



// Catalog.tsx
import * as React from 'react';
import styled from 'styled-components';
import {useNavigate} from 'react-router-dom';
import {ProductType} from "../../../../App";

type CatalogProps = {
	products: ProductType[]
};

export const Catalog = ({products}: CatalogProps) => {
	const navigate = useNavigate();

	const handleCardClick = (id: string) => {
		navigate(`/product/${id}`);
	};

	return (
		<StyledCatalog>
			{products.map(item => (
				<Card key={item.id} onClick={() => handleCardClick(item.id)}>
					<Image src={item.imgUrl} alt={item.title}/>
					<Title>{item.title} →</Title>
				</Card>
			))}
		</StyledCatalog>
	);
};

const StyledCatalog = styled.section`
  height: fit-content;
  display: flex;
  flex-wrap: wrap;
  gap: 109px;
  margin-left: 21.75%;
  max-width: calc(844px + 109px);
`;

const Card = styled.div`
  width: fit-content;
  overflow: hidden;
  text-align: center;
  cursor: pointer; /* Добавляем курсор указателя */
`;

const Image = styled.img`
  width: 422px;
  height: 638px;
  object-fit: cover;
  object-position: center;
`;

const Title = styled.h3`
  &:hover {
    cursor: pointer;
  }

  margin: 16px 0;
`;




// @flow
import * as React from 'react';
import styled from "styled-components";
import Photo from "../../../../../assets/images/catalogmain_photo.jpg"
import {theme} from "../../../../../styles/theme";

type StoreDescriptionProps = {

};
export const StoreDescription = (props: StoreDescriptionProps) => {
	return (
		<StyledMainDiv>
			<p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. A consequuntur delectus, ducimus enim esse incidunt, ipsum labore laborum libero necessitatibus perferendis ratione reiciendis repellat reprehenderit, saepe sed tenetur ut voluptatibus.</p>
			<p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. A accusantium at debitis doloribus eos impedit ipsum laboriosam modi nam nobis provident quaerat quis quos saepe soluta, ullam unde vero voluptates?</p>
			<div>
				<a href="#">К каталогу →</a>
				<img src={Photo} alt="#"/>
			</div>
			<p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Ab culpa doloremque eveniet facilis impedit minima nemo perferendis soluta unde veritatis. Aperiam autem eaque maiores minima molestias. Beatae magnam nostrum rerum.</p>
		</StyledMainDiv>
	);
};

const StyledMainDiv = styled.div`
	display: flex;
	font-size: 12px;
	justify-content: space-around;
  align-items: center;
	p {
		width: 108px;
	}
	div {
		a {
			color: ${theme.mainTextColor};
      border-bottom: ${theme.secondaryTextColor} 0.5px solid;
    }
		img{
			margin-top: 34px;
		}
		width: 191px;
		height: 208px;
	}
	flex-grow: 1;
`




// @flow
import * as React from 'react';
import styled from "styled-components";
import {StoreDescription} from "./store-description/StoreDescription";
import mainPhoto from '../../../../assets/images/mainPagePhoto.jpg'

export const Main = () => {
	return (
		<StyledMain>
			<PhotoWrapper><img src={mainPhoto} alt="Главное фото"/></PhotoWrapper>
			<StoreDescription/>
		</StyledMain>
	);
};

const PhotoWrapper = styled.div`
  height: 530px;
	width: 100%;
  background-color: rgba(0, 0, 0, 0.16);
	display: flex;
	justify-content: center;
	align-items: center;

	img {
		width: 100%;
		height: 100%;
		object-fit: cover;
	}
`

const StyledMain = styled.section`
	display: flex;
	flex-direction: column;
  min-height: 1082px;
`



// HomePage.tsx
import * as React from 'react';
import styled from 'styled-components';
import {Main} from './layout/main/Main';
import {Catalog} from './layout/catalog/Catalog';
	import {ProductType} from "../../App";

type HomePageProps = {
	products: ProductType[]
}

export const HomePage = ({products}: HomePageProps) => {
	return (
		<StyledMainDiv>
			<Main/>
			<Catalog products={products}/>
		</StyledMainDiv>
	);
};

const StyledMainDiv = styled.div`
  & > section {
    outline: orangered 1px solid;
  }
`;


import { createGlobalStyle } from 'styled-components';
import {theme} from "./theme";

export const GlobalStyle = createGlobalStyle`
  *, *::before, *::after {
    padding: 0;
    margin: 0;
    box-sizing: border-box;
    font-family: "Fira Mono", monospace;
    font-optical-sizing: auto;
    font-weight: 500;
    font-style: normal;
    line-height: 1.2;
  }

  body {
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    font-family:"Fira Mono", ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
    line-height: 1.5;
    -webkit-text-size-adjust: 100%;
    tab-size: 4;
    font-feature-settings: normal;
    background-color: ${theme.mainBackgroundColor};
    color: ${theme.mainTextColor};

    //& > div > div {
    //  display: flex;
    //  gap: 10px;
    //}
  }

  a {
    text-decoration: none;
  }

  ul {
    list-style: none;
  }

  .image-gallery {
    max-width: 600px; /* Устанавливает максимальную ширину контейнера галереи */
    width: 100%; /* Устанавливает ширину контейнера галереи на 100% от родительского элемента */
    margin: 0 auto; /* Центрирует галерею по горизонтали */
  }

  .image-gallery-thumbnail {
    border: 2px solid ${theme.mainBackgroundColor}; /* Устанавливает цвет границы миниатюр */
    border-radius: 8px; /* Скругляет углы миниатюр */
  }

  .image-gallery-thumbnail.active,
  .image-gallery-thumbnail:hover {
    border-color: ${theme.secondaryTextColor}; /* Устанавливает цвет границы активной миниатюры и миниатюры при наведении */
  }

  .image-gallery-icon {
    color: ${theme.mainTextColor}; /* Устанавливает цвет навигационных стрелок */
  }

  .image-gallery-icon:hover {
    color: ${theme.secondaryTextColor}; /* Устанавливает цвет навигационных стрелок при наведении */
  }

  //button {
  //  background-color: unset;
  //  border: none;
  //}
`



import React, { useEffect, useState } from 'react';
import { Navigate, Route, Routes } from 'react-router-dom';
import { Basket } from './pages/basket/Basket';
import { HomePage } from './pages/homePage/HomePage';
import { Navigation } from './components/navigator/Navigator';
import { db } from './firebase';
import { collection, getDocs } from 'firebase/firestore';
import ProductDetail from "./pages/homePage/layout/catalog/productDetail/ProductDetail";
import { PageNotFound } from "./components/404/PageNotFound";
import { Footer } from "./components/footer/Footer";
import { BasketProvider } from './components/BasketContext';
import OrderForm from "./pages/basket/OrderForm";

export type ProductType = {
	id: string;
	imgUrl: string;
	title: string;
	price: number;
	size: string;
	compound: string;
};

function App() {
	const [products, setProducts] = useState<ProductType[]>([]);

	useEffect(() => { // Данная Версия хука если в sessionStorage есть 'product', то берет данные от туда, а если нет то с fb
		let getProducts = sessionStorage.getItem('products'); //
		if (getProducts) {
			setProducts(JSON.parse(getProducts))
		} else {
			const fetchProducts = async () => {
				const productsCollection = collection(db, 'products');
				const productSnapshot = await getDocs(productsCollection);
				const productList = productSnapshot.docs.map(doc => ({
					id: doc.id,
					...doc.data()
				})) as ProductType[];
				setProducts(productList);
			}
			fetchProducts().catch(console.error);
		}
	}, []);

	// useEffect(() => {
	// 	const fetchProducts = async () => {
	// 		const productsCollection = collection(db, 'products');
	// 		const productSnapshot = await getDocs(productsCollection);
	// 		const productList = productSnapshot.docs.map(doc => ({
	// 			id: doc.id,
	// 			...doc.data()
	// 		})) as ProductType[];
	// 		setProducts(productList);
	// 	};
	//
	// 	fetchProducts().catch(console.error);
	// }, []); Данную версию хука пока оставим

	useEffect(() => {
		sessionStorage.setItem('products', JSON.stringify(products));
	}, );

	return (
		<BasketProvider>
			<div className="App">
				<Navigation />
				<Routes>
					<Route path="/" element={<HomePage products={products} />} />
					<Route path="/Basket" element={<Basket />} />
					<Route path="/order" element={<OrderForm />} /> {/* Новый маршрут */}
					<Route path="/product/:id" element={<ProductDetail products={products} />} />
					<Route path="/404" element={<PageNotFound />} />
					<Route path="*" element={<Navigate to="/404" />} />
				</Routes>
				<Footer />
			</div>
		</BasketProvider>
	);
}

export default App;
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import {GlobalStyle} from "./styles/GlobalStyle";
import {BrowserRouter} from "react-router-dom";

const root = ReactDOM.createRoot(
  document.getElementById('root') as HTMLElement
);
root.render(
  <BrowserRouter>
    <GlobalStyle/>
    <App/>
  </BrowserRouter>
);
